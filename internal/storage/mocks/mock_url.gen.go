// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/url.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	storage "github.com/pinbrain/urlshortener/internal/storage"
)

// MockURLStorage is a mock of URLStorage interface.
type MockURLStorage struct {
	ctrl     *gomock.Controller
	recorder *MockURLStorageMockRecorder
}

// MockURLStorageMockRecorder is the mock recorder for MockURLStorage.
type MockURLStorageMockRecorder struct {
	mock *MockURLStorage
}

// NewMockURLStorage creates a new mock instance.
func NewMockURLStorage(ctrl *gomock.Controller) *MockURLStorage {
	mock := &MockURLStorage{ctrl: ctrl}
	mock.recorder = &MockURLStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLStorage) EXPECT() *MockURLStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockURLStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockURLStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockURLStorage)(nil).Close))
}

// CreateUser mocks base method.
func (m *MockURLStorage) CreateUser(ctx context.Context) (*storage.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx)
	ret0, _ := ret[0].(*storage.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockURLStorageMockRecorder) CreateUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockURLStorage)(nil).CreateUser), ctx)
}

// DeleteUserURLs mocks base method.
func (m *MockURLStorage) DeleteUserURLs(userID int, urls []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserURLs", userID, urls)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserURLs indicates an expected call of DeleteUserURLs.
func (mr *MockURLStorageMockRecorder) DeleteUserURLs(userID, urls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserURLs", reflect.TypeOf((*MockURLStorage)(nil).DeleteUserURLs), userID, urls)
}

// GetURL mocks base method.
func (m *MockURLStorage) GetURL(ctx context.Context, id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockURLStorageMockRecorder) GetURL(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockURLStorage)(nil).GetURL), ctx, id)
}

// GetUser mocks base method.
func (m *MockURLStorage) GetUser(ctx context.Context, id int) (*storage.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(*storage.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockURLStorageMockRecorder) GetUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockURLStorage)(nil).GetUser), ctx, id)
}

// GetUserURLs mocks base method.
func (m *MockURLStorage) GetUserURLs(ctx context.Context, id int) ([]storage.ShortenURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserURLs", ctx, id)
	ret0, _ := ret[0].([]storage.ShortenURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserURLs indicates an expected call of GetUserURLs.
func (mr *MockURLStorageMockRecorder) GetUserURLs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserURLs", reflect.TypeOf((*MockURLStorage)(nil).GetUserURLs), ctx, id)
}

// IsValidID mocks base method.
func (m *MockURLStorage) IsValidID(id string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidID", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValidID indicates an expected call of IsValidID.
func (mr *MockURLStorageMockRecorder) IsValidID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidID", reflect.TypeOf((*MockURLStorage)(nil).IsValidID), id)
}

// Ping mocks base method.
func (m *MockURLStorage) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockURLStorageMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockURLStorage)(nil).Ping), ctx)
}

// SaveBatchURL mocks base method.
func (m *MockURLStorage) SaveBatchURL(ctx context.Context, urls []storage.ShortenURL, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBatchURL", ctx, urls, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBatchURL indicates an expected call of SaveBatchURL.
func (mr *MockURLStorageMockRecorder) SaveBatchURL(ctx, urls, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBatchURL", reflect.TypeOf((*MockURLStorage)(nil).SaveBatchURL), ctx, urls, userID)
}

// SaveURL mocks base method.
func (m *MockURLStorage) SaveURL(ctx context.Context, url string, userID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveURL", ctx, url, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveURL indicates an expected call of SaveURL.
func (mr *MockURLStorageMockRecorder) SaveURL(ctx, url, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveURL", reflect.TypeOf((*MockURLStorage)(nil).SaveURL), ctx, url, userID)
}
